# LAMP PLAYBOOK
---
- name: "Install components for LEMP-host"
  hosts: "lemp_ansible"
  become: true
  tasks:
    # NGINX
    - name: "Install nginx via apt" # имя, обязательно для любой таски из плейбука, должно содержать описание того что эта таска делает
      ansible.builtin.apt: # имя модуля, этот модуль устанавливает софт на хосте с помощью пакета apt
        name: "nginx" # имя пакета для установки
        state: "latest" # установить последнюю версию пакета, в отличие от present, если пакет уже установлен в системе, попробует его обновить
        update_cache: true # вызвать apt update перед установкой, чтобы убедиться в наличии самой свежей базы данных о пакетах

    - name: "Delete /var/www/html folder"
      ansible.builtin.file: # этот модуль работает с файлами и папками на удаленной машине
        path: "/var/www/html" # путь к файлу/папке на удаленной машине
        state: "absent" # перевести папку в состояние absent - то есть удалить ее

    - name: "Copy our landing to /var/www/html folder"
      ansible.builtin.copy: # этот модуль копирует файлы/директории с контрольной ноды на хосты
        src: "~/other/html" # путь к файлу/директории для копирования на контрольной ноде
        dest: "/var/www/" # путь для вставки на удаленной машине, вставка папок ВСЕГДА будет осуществляться внутрь папки, ансибл никогда не будет подменять папки или переименовывать их
        owner: "banshee" # пользователь владелец файла/директории на удаленной машине
        group: "banshee" # группа владелец файла/директории на удаленной машине
        mode: "0644" # права доступа к файлу/директории

    # MYSQL
    - name: "Install MySql via"
      ansible.builtin.apt:
        name: "mysql-server"
        state: "latest"
        update_cache: true

    - name: "Install pymsql via apt"
      ansible.builtin.apt:
        name: "python3-pymysql" # необходим для работы модулей mysql
        state: "latest"
        update_cache: true

    - name: "Set up root user"
      community.mysql.mysql_user: # модуль для управления пользователями
        name: "root" # имя пользователя для редактирования, обратите внимание на единообразие параметров модулей
        password: "Henjdsq123" # пароль пользователя для редактирования
        login_user: "root" # имя пользователя, под которым вносим изменения
        login_password: "Henjdsq123" # пароль пользователя под которым редактируем
        check_implicit_admin: true # сначала попробует зайти без пароля
        login_unix_socket: "/var/run/mysqld/mysqld.sock" # если mysql работает через сокет, вместо коннекта через порт, то нужен этот путь
        column_case_sensitive: false #[WARNING]: Option column_case_sensitive is not provided. The default is now false, so the column's name will be uppercased. The default will be changed to true in community.mysql 4.0.0.

    - name: "Remove anonymous users"
      community.mysql.mysql_user:
        name: "" # анонимные пользователи не имеют имени
        state: "absent" # как и с модулем file - удалить
        login_user: "root"
        login_password: "Henjdsq123"
        column_case_sensitive: false

    - name: "Remove test database"
      community.mysql.mysql_db: # модуль для управления базами данных
        name: "test" # тут это имя базы
        state: "absent" # как и с модулем file - удалить
        login_user: "root"
        login_password: "Henjdsq123"

    #PHP
    - name: "Installing php fpm and php mysql"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: "latest"
        update_cache: true
      with_items:
        - "php-fpm"
        - "php-mysql"

    - name: "Copy php files tp /var/www"
      ansible.builtin.copy:
        src: "~/other/php"
        dest: "/var/www"
        owner: "banshee"
        group: "banshee"
        mode: "0644"

    - name: "Copy nginx config for php testing"
      ansible.builtin.copy:
        src: "~/other/nginx_conf/php"
        dest: "/etc/nginx/sites-available/php"
        owner: "banshee"
        group: "banshee"
        mode: "0644"

    - name: "Link folder"
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/php"
        dest: "/etc/nginx/sites-enabled/php"
        state: "link" # здесь создаем симлинк

    - name: "Reload nginx"
      ansible.builtin.service:
        name: "nginx"
        state: "reloaded"
